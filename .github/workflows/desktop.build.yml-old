# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI Desktop Vault

on:
  push:
    branches:
      - develop
      - master
      - feature/upload-s3
    tags:
      - "*"
  pull_request:
    branches:
      - develop
      - master

jobs:
  desktop-build:
    runs-on: ${{ matrix.os }}
    env:
      REACT_APP_NET_TYPE_ID: ${{matrix.network}}
      ACTION_OS: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macOS-latest, ubuntu-latest]
        network: [0, 1, 2]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"

      - name: Install client dependencies
        working-directory: client
        run: |
          git config --global url."https://".insteadOf git://
          npm install

      - name: Audit client dependencies
        working-directory: client
        run: |
          npm audit fix --production

      - name: Client Build for Desktop
        working-directory: client
        env:
          CI: false
        run: |
          npm run build:desktop:ci

      - name: Copy Build
        working-directory: client
        run: |
          npm run copy-build

      - name: Install backend dependencies
        working-directory: zephyr-desktop-app
        run: |
          npm install

      - name: Install latest wallet core
        working-directory: zephyr-desktop-app
        run: |
          npm install zephyr-javascript@latest --save

      - name: Audit backend dependencies
        working-directory: zephyr-desktop-app
        run: |
          npm audit fix --production

      - if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install flatpak flatpak-builder elfutils

      - name: Build Final
        run: |
          sh './sh/make.sh'

      - name: Upload Windows Build
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.network }}
          path: zephyr-desktop-app/out/make/squirrel.windows/x64/*.exe

      - name: Upload Linux Build
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.network }}
          path: zephyr-desktop-app/out/make/deb/x64/*.deb

      - name: Upload Mac Build
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.network }}
          path: zephyr-desktop-app/out/make/*.dmg

  upload-build:
    needs: desktop-build
    runs-on: ubuntu-20.04
    env:
      REACT_APP_NET_TYPE_ID: ${{matrix.network}}
      ACTION_OS: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macOS-latest, ubuntu-latest]
        network: [0, 1, 2]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}-${{ matrix.network }}
      - name: Upload Zephyr CLI
        uses: shallwefootball/s3-upload-action@master
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          source_dir: "./"
          destination_dir: binaries/${{github.ref_name}}/${{ matrix.network }}
#    - name: notification
#      env:
#        BINARY_NAME: /${{ matrix.os }}-${{ matrix.network }}
#        BINARY_URL: https://docs.zephyrprotocol.com/binaries/
#        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
#      shell: bash
#      run: |
#        export checksum=($(sha256sum Zephyr-*))
#        export payload='{"username": "Github", "content": "GUI (${{ matrix.os }}) : '${BINARY_URL}${GITHUB_REF_NAME}${matrix.network}${BINARY_NAME}' (sha256 checksum : '${checksum}')"}'
#        echo $payload
#        curl -X POST -H "Content-Type: application/json" -d "$payload" $DISCORD_WEBHOOK
